import streamlit as st
from langchain.llms import OpenAI
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import PyPDFLoader
import os
import chromadb  # Ensure ChromaDB is installed


# Function to generate a response using OpenAI and ChromaDB for embeddings and retrieval
def generate_response(openai_api_key, query_text):
    # Initialize OpenAI embeddings with the provided API key
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)

    # Specify the path for the ChromaDB persistence directory
    persist_directory = os.path.abspath("C:\\Users\\abdal\\OneDrive\\Desktop\\PROTEC17 QA\\chromastore")

    # Create a vector store (Chroma) using the embeddings
    db = Chroma(persist_directory=persist_directory, embedding_function=embeddings)

    # Create a retriever interface to retrieve relevant documents
    retriever = db.as_retriever()

    # Create a question-answering (QA) chain using the OpenAI model and the retriever
    qa = RetrievalQA.from_chain_type(llm=OpenAI(openai_api_key=openai_api_key), chain_type='stuff', retriever=retriever)

    # Return the answer generated by the QA chain for the query
    return qa.run(query_text)


# Streamlit app configuration
st.set_page_config(
    page_title="PROTEC17üîó Ask the Contract Pro",  # Set the page title
    page_icon=":computer:",  # Set the page icon
    layout="wide",  # Layout to stretch across the full screen
    initial_sidebar_state="expanded"  # Sidebar to be expanded initially
)

# Header
st.title("Welcome to PTE17 üîó Ask the Contract Pro")
st.subheader("Get expert advice on contracts")

# Main content
st.write("This is where you can ask questions and get expert advice on contracts. "
         "Please make sure to get in contact with your union representative and/or steward!")

# Footer
st.markdown("---")
st.write("Built by union members‚ù§Ô∏è")


# Custom CSS to style the app
st.markdown(
    """
    <style>
    /* General page styling */
    body {
        color: #333;
        background-color: #f4f6f9;
        font-family: 'Helvetica Neue', sans-serif;
    }

    /* Title styling */
    .stApp .css-12oz5g7 {
        color: #333;
        font-weight: 700;
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-align: center;
    }

    /* Subheader styling */
    .stApp .css-10trblm {
        color: #4CAF50;
        font-size: 1.2rem;
        font-style: italic;
        text-align: center;
        margin-bottom: 20px;
    }

    /* Main content styling */
    .stApp .css-1v3fvcr {
        padding: 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        max-width: 80%;
        margin: auto;
    }

    /* Sidebar styling */
    .sidebar .sidebar-content {
        background-color: #e9ecef;
        padding: 20px;
        border-radius: 10px;
    }

    /* Buttons */
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 25px;
        padding: 12px 24px;
        text-align: center;
        font-size: 16px;
        margin: 10px 2px;
        cursor: pointer;
        transition: background-color 0.3s, box-shadow 0.3s;
    }

    .stButton>button:hover {
        background-color: #45a049;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
    }

    /* Input field */
    .stTextInput>div>input {
        padding: 12px;
        border-radius: 25px;
        border: 1px solid #ccc;
        width: 100%;
        margin-bottom: 20px;
        box-shadow: inset 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Footer styling */
    .footer {
        background-color: #f0f0f0;
        padding: 15px;
        text-align: center;
        color: #333;
        font-size: 14px;
        border-top: 1px solid #ddd;
        margin-top: 30px;
    }

    /* Custom Info Boxes */
    .stAlert {
        border-radius: 12px;
        background-color: #4CAF50;
        color: white;
        font-weight: 600;
        padding: 16px;
    }
    .stAlert p {
        margin: 0;
        font-size: 1rem;
    }

    /* Custom Spinner */
    .stSpinner {
        color: #4CAF50;
    }

    </style>
    """,
    unsafe_allow_html=True
)

# Input for query text
query_text = st.text_input('Enter your question:', placeholder='Please provide a short summary.')

# Form for submitting the query
result = []
with st.form('myform', clear_on_submit=True):
    openai_api_key = ""  # OpenAI API key
    submitted = st.form_submit_button('Submit')
    if submitted and openai_api_key.startswith('sk-'):
        with st.spinner('Calculating...'):  # Show spinner while processing
            response = generate_response(openai_api_key, query_text)  # Generate response
            guidlines = "Please be sure to contact your union rep."
            result.append(response)
            del openai_api_key  # Delete API key for security

# Display the response and guidelines
if len(result):
    st.info(response)  # Display response
    st.info(guidlines)  # Display additional guidelines
